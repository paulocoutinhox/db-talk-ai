from abc import ABC, abstractmethod


class BaseAIModel(ABC):
    def __init__(self):
        self.default_variant = None
        self.unsupported_role_models = []
        self.force_string_prompt = False

    @abstractmethod
    def load(self):
        """
        Load the AI model and any necessary resources.

        Raises:
            Exception: If the model cannot be loaded due to missing dependencies
                       or invalid configurations.
        """
        pass

    @abstractmethod
    def run(self, messages, variant=None):
        """
        Run the AI model with the provided input messages and return the response.

        Args:
            messages (list): A list of message dictionaries with at least two keys:
                             - "role": The role of the sender (e.g., "user", "assistant").
                             - "content": The actual text message to process.
            variant (str, optional): An internal model identifier specifying the variant to use.
                                     Defaults to None.

        Returns:
            str: The response generated by the AI model, as a string.

        Raises:
            Exception: If there is an issue during model execution or inference.
        """
        pass

    @abstractmethod
    def name(self):
        """
        Get the name of the AI model for display purposes.

        Returns:
            str: A user-friendly name of the AI model, e.g., "OpenAI GPT-4".
        """
        pass

    def get_variants(self):
        """
        Returns a dictionary of model variants.

        Returns:
            dict or None: A dictionary where:
                - Key (str): Internal model identifier used in API calls.
                - Value (str): User-friendly name for display in the UI.

            If no variants are available, returns None.
        """
        return None

    def get_default_variant(self):
        """
        Returns the default variant for this model.

        Returns:
            str: The internal identifier of the default variant.
        """
        return self.default_variant

    def prepare_messages(self, messages, variant):
        """
        Prepares messages for models that don't support role-based inputs
        or for models that always use a string prompt.

        Args:
            messages (list): List of message dictionaries with 'role' and 'content' keys.
            variant (str): The model variant to check against unsupported roles.

        Returns:
            str or list: A plain-text prompt (str) if roles are unsupported or if force_string_prompt is True.
                         Otherwise, returns the original list of messages.
        """
        if self.force_string_prompt or variant in self.unsupported_role_models:
            return "\n".join(
                f"{msg.get('role', 'user').capitalize()}: {msg['content']}"
                for msg in messages
            )

        return messages
